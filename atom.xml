<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JACK&#39;s BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Jack-An.github.io/"/>
  <updated>2018-12-21T09:02:43.824Z</updated>
  <id>https://Jack-An.github.io/</id>
  
  <author>
    <name>Jack An</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PASCAL VOC数据集</title>
    <link href="https://Jack-An.github.io/2018/12/19/PASCAL-dataset/"/>
    <id>https://Jack-An.github.io/2018/12/19/PASCAL-dataset/</id>
    <published>2018-12-19T11:22:31.000Z</published>
    <updated>2018-12-21T09:02:43.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PASCAL-VOC数据集是什么？"><a href="#PASCAL-VOC数据集是什么？" class="headerlink" title="PASCAL VOC数据集是什么？"></a>PASCAL VOC数据集是什么？</h1><p>最近在看Yolo1的论文，因为论文中使用到了PASCAL VOC数据集，这个之前没接触过，到官网下载后完全不知道怎么用，看了一些相关的介绍后，才明白该数据集的组成。这里PASCAL是Pattern Analysis, Statistical Modelling and Computational Learning的简写，VOC是Visual Object Classes的简写。</p><h1 id="数据集的组成"><a href="#数据集的组成" class="headerlink" title="数据集的组成"></a>数据集的组成</h1><p>将数据集下载解压之后的样子如下：<br><img src="/images/pascal1.png" alt="pascal1"></p><ol><li>在检测和识别问题中，关注的是Annotations, ImageSets,以及JPEGImages三个文件夹。在JPEGImages文件中就是数据集中的所有图片了，总共有17125张。这个文件夹包含了所有的训练和测试数据，命名的格式为：年份_编号.jpg。<img src="/images/pascal2.png" alt="pascal2"></li><li>重点关注的文件夹是Annotations,从命名就可以知道里面是标注的信息。这个文件夹下的文件命名和JPEGImages文件夹下面是对应的，只是后缀名不同。PASCAL数据集使用了xml格式的标签文件来保存数据。值得注意的是，一张图片可能存在多个物体，所以标注中可能会出现多个bounding box的信息。对2007_000027.jpg文件来说，它的标注信息如下：<img src="/images/pascal3.png" alt="pascal3"> 在目标检测中我们更加关注的是红色框中的内容，我们要从中提取到类别和bounding box的相关信息，对应于xml中的name和bndbox中的数据，其中bounding box给出的标注数据是左上角和右下角的绝对坐标。接下来使用Python的xml解析库来提取其中的内容。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pascal</span><span class="params">(xml_file_path)</span>:</span></span><br><span class="line">    tree = ET.parse(xml_file_path)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    info = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> root.findall(<span class="string">'object'</span>):</span><br><span class="line">        label = c.find(<span class="string">'name'</span>).text</span><br><span class="line">        x1 = int(float(c.find(<span class="string">'./bndbox/xmin'</span>).text))</span><br><span class="line">        y1 = int(float(c.find(<span class="string">'./bndbox/ymin'</span>).text))</span><br><span class="line">        x2 = int(float(c.find(<span class="string">'./bndbox/xmax'</span>).text))</span><br><span class="line">        y2 = int(float(c.find(<span class="string">'./bndbox/ymax'</span>).text))</span><br><span class="line">        info.append((label, x1, y1, x2, y2))</span><br><span class="line">    <span class="keyword">return</span> info</span><br></pre></td></tr></table></figure>代码很简单，稍微去看一下xml库的tutorial就可以写出来了，有一点比较坑的是有几个标注文件的bounding box出现了小数，说实话我就不是很懂是什么意思了，所以我这里就直接将它强制转化为了int。</li><li>最后是ImageSets文件夹，这个文件夹下面又包含了四个文件夹，其中Action下存放的是人的动作的数据，Layout下存放的是人体部位的数据，Main下存访的是图像物体识别的数据，总共包含20类，Segmentation下存放的是用于图像分割的数据。这里主要说说Main目录，它下面包含了所有分类的train, trainval, val的数据，每个txt文件里面都有两列，一列是文件的名称，一列是表示正负样本（目标检测中还用不到）。其实，这个文件夹最重要的作用就是用来划分数据集。<ul><li>_train中存放的是训练使用的数据，每一个class的train数据都有5717个。</li><li>_val中存放的是验证结果使用的数据，每一个class的val数据都有5823个。</li><li>_trainval将上面两个进行了合并，每一个class有11540个。</li></ul></li><li>最后放一张带有bounding box的图片吧<img src="/images/Figure_1.png" alt="pascal3"></li></ol><h1 id="数据集划分的实现"><a href="#数据集划分的实现" class="headerlink" title="数据集划分的实现"></a>数据集划分的实现</h1><p>数据集的划分主要就是根据ImageSets文件夹下面的Main文件下的_train和_val文件，对20个类进行遍历，然后将对应的图片和标注数据放在某个文件夹下面。这个过程还是很简单的，下面使具体的实现代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(file_path, images_path, save_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    file path: path to ImageSets/Main/</span></span><br><span class="line"><span class="string">    images_path : path to JEPGImages </span></span><br><span class="line"><span class="string">    save_path: path to save </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    classes = os.listdir(file_path)</span><br><span class="line">    <span class="comment">## 得到需要的train和val的数据</span></span><br><span class="line">    train = []</span><br><span class="line">    val = []</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> classes:</span><br><span class="line">        <span class="keyword">if</span> f.endswith(<span class="string">"_train.txt"</span>):</span><br><span class="line">            train.append(file_path + <span class="string">'/'</span> + f)</span><br><span class="line">        <span class="keyword">elif</span> f.endswith(<span class="string">"_val.txt"</span>):</span><br><span class="line">            val.append(file_path + <span class="string">'/'</span> + f)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> train:</span><br><span class="line">        <span class="keyword">with</span> open(c, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                img_name = line.split(<span class="string">" "</span>)[<span class="number">0</span>] + <span class="string">'.jpg'</span></span><br><span class="line">                src_path = images_path + <span class="string">'/'</span>+ img_name</span><br><span class="line">                dest_path = save_path + <span class="string">'/train/'</span> + img_name</span><br><span class="line">                shutil.copyfile(src_path, dest_path)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> val:</span><br><span class="line">        <span class="keyword">with</span> open(c, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                img_name = line.split(<span class="string">" "</span>)[<span class="number">0</span>] + <span class="string">'.jpg'</span></span><br><span class="line">                src_path = images_path + <span class="string">'/'</span>+ img_name</span><br><span class="line">                dest_path = save_path + <span class="string">'/test/'</span> + img_name</span><br><span class="line">                shutil.copyfile(src_path, dest_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>参数为ImageSets，JPEGImages的路径以及保存的路径(该目录下应该有train和test文件夹)，调用该函数等一段时间即可完成数据集的划分。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/zhangjunbob/article/details/52769381" target="_blank" rel="noopener">PASCAL VOC数据集分析</a><br><a href="https://zhuanlan.zhihu.com/p/33405410" target="_blank" rel="noopener">PASCAL VOC数据集的标注格式</a></p>]]></content>
    
    <summary type="html">
    
      PASCAL VOC数据集的标注方式,利用Python实现xml的解析,PASCAL VOC数据集划分
    
    </summary>
    
      <category term="计算机视觉" scheme="https://Jack-An.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="VOC" scheme="https://Jack-An.github.io/tags/VOC/"/>
    
      <category term="Python" scheme="https://Jack-An.github.io/tags/Python/"/>
    
      <category term="Object Detection" scheme="https://Jack-An.github.io/tags/Object-Detection/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="https://Jack-An.github.io/2018/12/18/hello-world/"/>
    <id>https://Jack-An.github.io/2018/12/18/hello-world/</id>
    <published>2018-12-18T13:32:13.000Z</published>
    <updated>2018-12-21T08:44:49.773Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      Hello World
    
    </summary>
    
      <category term="工具" scheme="https://Jack-An.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
</feed>
