<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JACK&#39;s BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Jack-An.github.io/"/>
  <updated>2020-08-16T07:34:50.686Z</updated>
  <id>https://Jack-An.github.io/</id>
  
  <author>
    <name>Jack An</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高性能MySQL笔记1 - 架构</title>
    <link href="https://Jack-An.github.io/2020/08/16/mysql-note1/"/>
    <id>https://Jack-An.github.io/2020/08/16/mysql-note1/</id>
    <published>2020-08-16T07:15:11.000Z</published>
    <updated>2020-08-16T07:34:50.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h1><h2 id="MySQL结构图"><a href="#MySQL结构图" class="headerlink" title="MySQL结构图"></a>MySQL结构图</h2><p><img src="/images/db1.jpg" alt="db1"></p><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>也叫做共享锁（shared lock）和排他锁（exclusive lock）</p><blockquote><p>概念</p></blockquote><ul><li>读锁是共享的，相互不阻塞，多个用户可以在同一时间读区同一个资源，相互不干扰</li><li>写锁是排他的，一个写锁会阻塞其他的写锁和读锁，只有这样，才能保证在给定的时间内，只有一个用户能执行写入，并防止其他用户读区正在写入的同一资源</li></ul><h2 id="锁粒度"><a href="#锁粒度" class="headerlink" title="锁粒度"></a>锁粒度</h2><blockquote><p>Note</p></blockquote><ul><li>提高系统并发性的方式是让锁对象更具有选择性，尽量只锁定需要修改的部分数据而不是所有的资源</li><li>锁的管理也需要资源开销，因此系统的性能和锁管理也有关系</li><li>锁策略就是在锁的开销和数据的安全性之间寻求平衡，每种MySQL存储引擎都可以实现自己的锁策略和锁粒度</li></ul><h3 id="表锁（table-lock）"><a href="#表锁（table-lock）" class="headerlink" title="表锁（table lock）"></a>表锁（table lock）</h3><blockquote><p>Note</p><ul><li>表锁是MySQL最基本的锁策略，开销最小，锁定整张表</li><li>写锁比读锁拥有更高的优先级，写锁可以插入到锁队列的前面，反之读锁不能插入到锁队列的前</li><li>MySQL服务器会为特定的操作使用有效的表锁，例如<code>ALTER TABLE</code>会使用表锁而忽略存储引擎的锁机制</li></ul></blockquote><h3 id="行级锁（row-lock）"><a href="#行级锁（row-lock）" class="headerlink" title="行级锁（row lock）"></a>行级锁（row lock）</h3><blockquote><p>Note </p><ul><li>行级锁可以最大程度的支持并发，同时也带来最大的锁开销</li><li>行级锁只有在存储引擎层实现，InnoDB和XtraDB均实现了行锁</li></ul></blockquote><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>定义： 一组原子性的SQL查询，或者说是一个独立的工作单元；（如果数据库引擎可以成功的应对该次查询的全部语句，则执行该组查询，否则所有的语句都不会执行）</p><h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><p>Note：</p><ul><li>原子性(atomicity)：一个事物必须被视为一个不可分割的最小工作单元，要么所有操作全部提交成功，要么全部失败回滚 </li><li>一致性(consistancy)：数据库总是从一个一致性的状态转换到另一个一致性的状态</li><li>隔离性(isolation)：<strong>通常来说</strong>，一个事务所做的修改在最终提交前，对其他事务不可见</li><li>持久性(durability)：一旦事务提交，则其所做的修改就会永远的保存到数据库中</li></ul><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>Note: </p><ol><li>SQL在标准中定义了四种隔离界别，每种级别规定了一个事物所做的修改，哪些是事务内和事务间可见的，哪些是不可见的。</li><li>较低的隔离界别通常可以执行更高的并发，系统的开销也更低</li></ol><p>概念：</p><ul><li><strong>READ UNCOMMITTED（未提交读）</strong>: 事务中的修改即使没有提交，对其他事务也是可见的，事务可以读取未提交的数据，称为脏读(dirty read)</li><li><strong>READ COMMITTED（提交读）</strong>：大多数数据库的默认隔离级别（MySQL不是）。事务开始前只能看见已经提交事务所做的修改，也就是说一个事务从开始直到提交之前，所做的修改都对其他事务不可见，也叫做不可重复读（nonrepeatable read），两次执行同样的查询，可能得到不一样的结果</li><li><strong>REPEATABLE READ（可重复读）</strong>：解决了脏读的问题，保证事务内两次同样的查询得到相同的结果，但没有解决幻读（plantom read）的问题（某个事务在读取某个范围内的记录时，另一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围内的记录时，会产生幻行（plantom row））,InnoDB和XtraDB通过多版本控制（MVVC）解决幻读问题</li><li><strong>SERIALIZABLE（可串行化）</strong>：最高的隔离级别，强制事务串行执行</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>Note: </p><ol><li>死锁是指两个或者多个事务在同一资源上相互占用，并请求锁定对方占用的资源时，导致的恶性循环的现象。多个事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源时，也会产生死锁。</li><li>数据库实现了各种死锁检测以及死锁超时机制。越复杂的系统，越能检测到死锁的循环依赖，并立即返回一个错误。InnoDB目前处理死锁的方式是，将持有最少行级排他锁的事务进行回滚。</li><li>锁的行为和顺序是和存储引擎相关的，死锁产生有双重原因：有的是因为真正的数据冲突，有的则是因为存储引擎的实现方式导致的</li><li>死锁发生后，只有部分或者完全回滚其中一个事务，才能打破死锁，无法避免。</li></ol><h2 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h2><p>Note: </p><ol><li>事务日志可以提高事务的效率，每次修改表的时候只需要修改其内存拷贝，然后吧修改行为记录到持久化在硬盘中的事务日志，而不用每次都把数据持久化到硬盘；</li><li>事务日志采用追加的方式，顺序写磁盘，效率高很多（普通硬盘）</li><li>内存中被修改后的数据可以在后台慢慢持久化到硬盘，事务日志被称为预写式日志（write-ahead logging），修改数据需要写两次硬盘</li><li>如果数据的修改已经持久化到事务日志，但数据本身没有写回磁盘，系统崩溃之后，存储引擎可以在重启的时候根据日志恢复数据</li></ol><h2 id="MySQL中的事务"><a href="#MySQL中的事务" class="headerlink" title="MySQL中的事务"></a>MySQL中的事务</h2><p>Note: </p><ol><li>MySQL提供了两种事务型的引擎：InnoDB和NDB Clusetr</li><li>MySQL默认采用<strong>自动提交（Autocommit）</strong> 模式，即如果不是显示的开启一个事务，则每个查询都被当作一个事务提交。</li><li>尽量在事务中不要混合多种存储引擎（一次事务中出现事务型和非事务型的表），不然rollback就可能会发生问题导致最终的结果无法确定 </li><li>InnoDB采用的两阶段锁定协议（two-phase locking protocol）。在事务的执行过程中随时可以执行锁定，只有在COMMIT或者ROLLBACK的时候会释放锁，所有锁在同一时刻释放（隐式锁）</li><li>InnoDB也支持通过特定的语句来显式锁定<br><code>select ... lock in share mode</code><br><code>select ... for update</code></li></ol><h1 id="多版本并发控制（MVCC）"><a href="#多版本并发控制（MVCC）" class="headerlink" title="多版本并发控制（MVCC）"></a>多版本并发控制（MVCC）</h1>]]></content>
    
    <summary type="html">
    
      MySQL并发控制,事务,多版本并发控制（MVVC）
    
    </summary>
    
      <category term="数据库" scheme="https://Jack-An.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://Jack-An.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>libtorch 的配置以及简单使用</title>
    <link href="https://Jack-An.github.io/2018/12/23/libtorch-test/"/>
    <id>https://Jack-An.github.io/2018/12/23/libtorch-test/</id>
    <published>2018-12-23T07:40:35.000Z</published>
    <updated>2018-12-23T09:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><p>因为我的C++开发环境一直都是Windows下的Clion搭配WSL(Windows sub linux)，安装第三方库的时候比较方便（VS下的编译环境太复杂了，还各种问题）。这次要用到的库是libtorch，这个在Pytorch官网下载下来放到随便一个目录下解压即可，另外一个是OpenCV,我是用的OpenCV-3.4.4的版本，首先去官网下载到源码然后按照<a href="https://docs.opencv.org/3.4/d7/d9f/tutorial_linux_install.html下的教程编译即可" target="_blank" rel="noopener">install tutorial</a>（需要大概挺长时间的)。<br>注： 所有的代码均来自于<a href="https://github.com/iamhankai/cpp-pytorch" target="_blank" rel="noopener">iamhankai</a>,我只是稍微做了修改（原代码我跑不起来，可能是Libtorch有更新导致的），添加了一些注释。如果使用的不是Clion的话，可以参考iamhankai的Github给出的命令行的编译和执行过程。</p><h1 id="配置C-项目环境"><a href="#配置C-项目环境" class="headerlink" title="配置C++项目环境"></a>配置C++项目环境</h1><p>使用Clion的话直接新建一个Project即可，编辑CMakeLists.txt文件，添加相应的库配置文件如下：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(CppProject)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(Torch_DIR ~/libtorch/share/cmake/Torch)   <span class="comment">#根据自己保存的路径输入</span></span><br><span class="line"><span class="keyword">set</span>(OpenCV_DIR ~/opencv-<span class="number">3.4</span>.<span class="number">4</span>/build)          <span class="comment">#编译OpenCV的时候创建的build文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Torch REQUIRED)                  <span class="comment">#查找库</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(CppProject main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(CppProject <span class="variable">$&#123;OpenCV_LIBS&#125;</span> <span class="variable">$&#123;TORCH_LIBRARIES&#125;</span> )   <span class="comment">#添加链接文件</span></span><br></pre></td></tr></table></figure></p><h1 id="使用Python保存模型到本地"><a href="#使用Python保存模型到本地" class="headerlink" title="使用Python保存模型到本地"></a>使用Python保存模型到本地</h1><p>新建一个Python的脚本文件，这个文件主要是下载一个预训练模型然后使用JIT保存到本地。本且使用本地的一张图片来进行预测。代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载预训练模型</span></span><br><span class="line">model = torchvision.models.resnet18(pretrained=<span class="keyword">True</span>)</span><br><span class="line">model.eval()  <span class="comment"># 评估模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个随机Tensor,Pytorch是基于动态图的框架，需要必须先计算一次前向传播</span></span><br><span class="line">example = torch.rand(<span class="number">1</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用torch.jit.trace生成一个torch.jit.ScriptModule</span></span><br><span class="line">traced_script_module = torch.jit.trace(model, example)</span><br><span class="line">traced_script_module.save(<span class="string">"model.pt"</span>)  <span class="comment"># 保存模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算一次前向传播所需要的时间</span></span><br><span class="line">batch = torch.rand(<span class="number">64</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>)</span><br><span class="line">start = time()</span><br><span class="line">output = traced_script_module(batch)</span><br><span class="line">stop = time()</span><br><span class="line">print(str(stop - start) + <span class="string">"s"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取本地的照片</span></span><br><span class="line">image = Image.open(<span class="string">'dog.png'</span>).convert(<span class="string">'RGB'</span>)</span><br><span class="line">default_transform = transforms.Compose([</span><br><span class="line">    transforms.Resize([<span class="number">224</span>, <span class="number">224</span>]),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                         std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">])</span><br><span class="line">image = default_transform(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前向传播</span></span><br><span class="line">output = traced_script_module(image.unsqueeze(<span class="number">0</span>))</span><br><span class="line"><span class="comment"># print(output[0, :10])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测打印Top-5</span></span><br><span class="line">labels = np.loadtxt(<span class="string">'synset_words.txt'</span>, dtype=str, delimiter=<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">data_out = output[<span class="number">0</span>].data.numpy()</span><br><span class="line">sorted_idxs = np.argsort(-data_out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, idx <span class="keyword">in</span> enumerate(sorted_idxs[:<span class="number">5</span>]):</span><br><span class="line">    print(<span class="string">f"label: <span class="subst">&#123;labels[idx]&#125;</span>, score: <span class="subst">&#123;data_out[idx]&#125;</span>"</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>运行结果如下：<br><img src="/../images/torch1.png" alt="torch1"></p><h1 id="C-加载模型"><a href="#C-加载模型" class="headerlink" title="C++加载模型"></a>C++加载模型</h1><p>使用C++进行模型的加载，然后使用OpenCV来读取一张图片并执行预测，代码的过程和Python脚本差不多。下面是main.cpp代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;torch/script.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;torch/torch.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* main */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接受三个运行参数</span></span><br><span class="line">    <span class="comment">//1. 模型</span></span><br><span class="line">    <span class="comment">//2. 要预测的图片</span></span><br><span class="line">    <span class="comment">//3. label的文本</span></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"usage: CppProject &lt;path-to-exported-script-module&gt; "</span></span><br><span class="line">                  &lt;&lt; <span class="string">"&lt;path-to-image&gt;  &lt;path-to-category-text&gt;\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载模型</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;torch::jit::script::Module&gt; <span class="keyword">module</span> = torch::jit::load(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    assert(<span class="keyword">module</span> != <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"load model ok\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成一个随机输入</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;torch::jit::IValue&gt; inputs;</span><br><span class="line">    inputs.emplace_back(torch::rand(&#123;<span class="number">64</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>&#125;));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算网络一次前向传播的需要时间</span></span><br><span class="line">    <span class="keyword">auto</span> t = (<span class="keyword">double</span>) cv::getTickCount();</span><br><span class="line">    <span class="keyword">module</span>-&gt;forward(inputs).toTensor();</span><br><span class="line">    t = (<span class="keyword">double</span>) cv::getTickCount() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"execution time = %gs\n"</span>, t / cv::getTickFrequency());</span><br><span class="line">    inputs.pop_back();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记载一张图片并且进行归一化</span></span><br><span class="line">    cv::Mat image;</span><br><span class="line">    image = cv::imread(argv[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">    cv::cvtColor(image, image, CV_BGR2RGB);  <span class="comment">//转化为RGB三通道</span></span><br><span class="line">    cv::Mat img_float;</span><br><span class="line">    image.convertTo(img_float, CV_32F, <span class="number">1.0</span> / <span class="number">255</span>);   <span class="comment">//首先归一化到[0,1]区间</span></span><br><span class="line">    cv::resize(img_float, img_float, cv::Size(<span class="number">224</span>, <span class="number">224</span>));  <span class="comment">//resize to 224，预训练的模型输入是batchsize x3 x 224 x 224</span></span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; img_float.at&lt;cv::Vec3f&gt;(56,34)[1] &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="keyword">auto</span> img_tensor = torch::CPU(torch::kFloat32).tensorFromBlob(img_float.data, &#123;<span class="number">1</span>, <span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>&#125;);   <span class="comment">//将cv::Mat转成tensor</span></span><br><span class="line">    img_tensor = img_tensor.permute(&#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>&#125;);   <span class="comment">//翻转让通道是第二个维度</span></span><br><span class="line">    <span class="comment">//均值归一化</span></span><br><span class="line">    img_tensor[<span class="number">0</span>][<span class="number">0</span>] = img_tensor[<span class="number">0</span>][<span class="number">0</span>].sub_(<span class="number">0.485</span>).div_(<span class="number">0.229</span>);</span><br><span class="line">    img_tensor[<span class="number">0</span>][<span class="number">1</span>] = img_tensor[<span class="number">0</span>][<span class="number">1</span>].sub_(<span class="number">0.456</span>).div_(<span class="number">0.224</span>);</span><br><span class="line">    img_tensor[<span class="number">0</span>][<span class="number">2</span>] = img_tensor[<span class="number">0</span>][<span class="number">2</span>].sub_(<span class="number">0.406</span>).div_(<span class="number">0.225</span>);</span><br><span class="line">    <span class="keyword">auto</span> img_var = torch::autograd::make_variable(img_tensor, <span class="literal">false</span>);</span><br><span class="line">    inputs.emplace_back(img_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对输入的图片进行前向传播计算</span></span><br><span class="line">    torch::Tensor out_tensor = <span class="keyword">module</span>-&gt;forward(inputs).toTensor();</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; out_tensor.slice(/*dim=*/1, /*start=*/0, /*end=*/10) &lt;&lt; '\n';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载label的文件</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> label_file = argv[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">ifstream <span class="title">rf</span><span class="params">(label_file.c_str())</span></span>;</span><br><span class="line">    CHECK(rf) &lt;&lt; <span class="string">"Unable to open labels file "</span> &lt;&lt; label_file;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> line;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; labels;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::getline(rf, line))</span><br><span class="line">        labels.push_back(line);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印score是Top-5的预测label和score</span></span><br><span class="line">    <span class="built_in">std</span>::tuple&lt;torch::Tensor, torch::Tensor&gt; result = out_tensor.sort(<span class="number">-1</span>, <span class="literal">true</span>);</span><br><span class="line">    torch::Tensor top_scores = <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(result)[<span class="number">0</span>];</span><br><span class="line">    torch::Tensor top_idxs = <span class="built_in">std</span>::get&lt;<span class="number">1</span>&gt;(result)[<span class="number">0</span>].toType(torch::kInt32);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> top_scores_a = top_scores.accessor&lt;<span class="keyword">float</span>, <span class="number">1</span>&gt;();  <span class="comment">//1是dim</span></span><br><span class="line">    <span class="keyword">auto</span> top_idxs_a = top_idxs.accessor&lt;<span class="keyword">int</span>, <span class="number">1</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"score: "</span> &lt;&lt; top_scores_a[i];</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"  label: "</span> &lt;&lt; labels[top_idxs_a[i]] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>运行结果如下：<br><img src="/../images/torch2.png" alt="torch2"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过Python代码和C++的运行结果可以看出来，C++的执行还是更快一点的。而且Pytorch的C++写起来也还是听方便的，很多API和Python都差不多。完整的项目可以在我的Github里面<a href="https://github.com/Jack-An/TorchDemo" target="_blank" rel="noopener">TorchDemo</a>找到。</p>]]></content>
    
    <summary type="html">
    
      WSL下的Libtorch配置,OpenCV的配置
    
    </summary>
    
      <category term="Pytorch" scheme="https://Jack-An.github.io/categories/Pytorch/"/>
    
    
      <category term="Pytorch" scheme="https://Jack-An.github.io/tags/Pytorch/"/>
    
      <category term="Libtorch" scheme="https://Jack-An.github.io/tags/Libtorch/"/>
    
      <category term="WSL" scheme="https://Jack-An.github.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>PASCAL VOC数据集</title>
    <link href="https://Jack-An.github.io/2018/12/19/PASCAL-dataset/"/>
    <id>https://Jack-An.github.io/2018/12/19/PASCAL-dataset/</id>
    <published>2018-12-19T11:22:31.000Z</published>
    <updated>2018-12-22T10:36:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PASCAL-VOC数据集是什么？"><a href="#PASCAL-VOC数据集是什么？" class="headerlink" title="PASCAL VOC数据集是什么？"></a>PASCAL VOC数据集是什么？</h1><p>最近在看Yolo1的论文，因为论文中使用到了PASCAL VOC数据集，这个之前没接触过，到官网下载后完全不知道怎么用，看了一些相关的介绍后，才明白该数据集的组成。这里PASCAL是Pattern Analysis, Statistical Modelling and Computational Learning的简写，VOC是Visual Object Classes的简写。</p><h1 id="数据集的组成"><a href="#数据集的组成" class="headerlink" title="数据集的组成"></a>数据集的组成</h1><p>将数据集下载解压之后的样子如下：<br><img src="/images/pascal1.png" alt="pascal1"></p><ol><li>在检测和识别问题中，关注的是Annotations, ImageSets,以及JPEGImages三个文件夹。在JPEGImages文件中就是数据集中的所有图片了，总共有17125张。这个文件夹包含了所有的训练和测试数据，命名的格式为：年份_编号.jpg。<img src="/images/pascal2.png" alt="pascal2"></li><li>重点关注的文件夹是Annotations,从命名就可以知道里面是标注的信息。这个文件夹下的文件命名和JPEGImages文件夹下面是对应的，只是后缀名不同。PASCAL数据集使用了xml格式的标签文件来保存数据。值得注意的是，一张图片可能存在多个物体，所以标注中可能会出现多个bounding box的信息。对2007_000027.jpg文件来说，它的标注信息如下：<img src="/images/pascal3.png" alt="pascal3"> 在目标检测中我们更加关注的是红色框中的内容，我们要从中提取到类别和bounding box的相关信息，对应于xml中的name和bndbox中的数据，其中bounding box给出的标注数据是左上角和右下角的绝对坐标。接下来使用Python的xml解析库来提取其中的内容。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pascal</span><span class="params">(xml_file_path)</span>:</span></span><br><span class="line">    tree = ET.parse(xml_file_path)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    info = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> root.findall(<span class="string">'object'</span>):</span><br><span class="line">        label = c.find(<span class="string">'name'</span>).text</span><br><span class="line">        x1 = int(float(c.find(<span class="string">'./bndbox/xmin'</span>).text))</span><br><span class="line">        y1 = int(float(c.find(<span class="string">'./bndbox/ymin'</span>).text))</span><br><span class="line">        x2 = int(float(c.find(<span class="string">'./bndbox/xmax'</span>).text))</span><br><span class="line">        y2 = int(float(c.find(<span class="string">'./bndbox/ymax'</span>).text))</span><br><span class="line">        info.append((label, x1, y1, x2, y2))</span><br><span class="line">    <span class="keyword">return</span> info</span><br></pre></td></tr></table></figure>代码很简单，稍微去看一下xml库的tutorial就可以写出来了，有一点比较坑的是有几个标注文件的bounding box出现了小数，说实话我就不是很懂是什么意思了，所以我这里就直接将它强制转化为了int。</li><li>最后是ImageSets文件夹，这个文件夹下面又包含了四个文件夹，其中Action下存放的是人的动作的数据，Layout下存放的是人体部位的数据，Main下存访的是图像物体识别的数据，总共包含20类，Segmentation下存放的是用于图像分割的数据。这里主要说说Main目录，它下面包含了所有分类的train, trainval, val的数据，每个txt文件里面都有两列，一列是文件的名称，一列是表示正负样本（目标检测中还用不到）。其实，这个文件夹最重要的作用就是用来划分数据集。<ul><li>_train中存放的是训练使用的数据，每一个class的train数据都有5717个。</li><li>_val中存放的是验证结果使用的数据，每一个class的val数据都有5823个。</li><li>_trainval将上面两个进行了合并，每一个class有11540个。</li></ul></li><li>最后放一张带有bounding box的图片吧<img src="/images/Figure_1.png" alt="pascal3"></li></ol><h1 id="数据集划分的实现"><a href="#数据集划分的实现" class="headerlink" title="数据集划分的实现"></a>数据集划分的实现</h1><p>数据集的划分主要就是根据ImageSets文件夹下面的Main文件下的_train和_val文件，对20个类进行遍历，然后将对应的图片和标注数据放在某个文件夹下面。这个过程还是很简单的，下面是具体的实现代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(file_path, images_path, save_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    file path: path to ImageSets/Main/</span></span><br><span class="line"><span class="string">    images_path : path to JEPGImages </span></span><br><span class="line"><span class="string">    save_path: path to save </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    classes = os.listdir(file_path)</span><br><span class="line">    <span class="comment">## 得到需要的train和val的数据</span></span><br><span class="line">    train = []</span><br><span class="line">    val = []</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> classes:</span><br><span class="line">        <span class="keyword">if</span> f.endswith(<span class="string">"_train.txt"</span>):</span><br><span class="line">            train.append(file_path + <span class="string">'/'</span> + f)</span><br><span class="line">        <span class="keyword">elif</span> f.endswith(<span class="string">"_val.txt"</span>):</span><br><span class="line">            val.append(file_path + <span class="string">'/'</span> + f)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> train:</span><br><span class="line">        <span class="keyword">with</span> open(c, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                img_name = line.split(<span class="string">" "</span>)[<span class="number">0</span>] + <span class="string">'.jpg'</span></span><br><span class="line">                src_path = images_path + <span class="string">'/'</span>+ img_name</span><br><span class="line">                dest_path = save_path + <span class="string">'/train/'</span> + img_name</span><br><span class="line">                shutil.copyfile(src_path, dest_path)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> val:</span><br><span class="line">        <span class="keyword">with</span> open(c, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                img_name = line.split(<span class="string">" "</span>)[<span class="number">0</span>] + <span class="string">'.jpg'</span></span><br><span class="line">                src_path = images_path + <span class="string">'/'</span>+ img_name</span><br><span class="line">                dest_path = save_path + <span class="string">'/test/'</span> + img_name</span><br><span class="line">                shutil.copyfile(src_path, dest_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>参数为ImageSets，JPEGImages的路径以及保存的路径(该目录下应该有train和test文件夹)，调用该函数等一段时间即可完成数据集的划分。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/zhangjunbob/article/details/52769381" target="_blank" rel="noopener">PASCAL VOC数据集分析</a><br><a href="https://zhuanlan.zhihu.com/p/33405410" target="_blank" rel="noopener">PASCAL VOC数据集的标注格式</a></p>]]></content>
    
    <summary type="html">
    
      PASCAL VOC数据集的标注方式,利用Python实现xml的解析,PASCAL VOC数据集划分
    
    </summary>
    
      <category term="计算机视觉" scheme="https://Jack-An.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="VOC" scheme="https://Jack-An.github.io/tags/VOC/"/>
    
      <category term="Python" scheme="https://Jack-An.github.io/tags/Python/"/>
    
      <category term="Object Detection" scheme="https://Jack-An.github.io/tags/Object-Detection/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="https://Jack-An.github.io/2018/12/18/hello-world/"/>
    <id>https://Jack-An.github.io/2018/12/18/hello-world/</id>
    <published>2018-12-18T13:32:13.000Z</published>
    <updated>2018-12-21T08:44:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      Hello World
    
    </summary>
    
      <category term="工具" scheme="https://Jack-An.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
</feed>
